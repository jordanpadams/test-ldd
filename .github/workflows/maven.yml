# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#apache-maven-with-a-settings-path

---

name: Continuous Integration and Deployment

on:
  push:
    branches:
      - master
      # - pulls/()
  pull_request:
    types: [opened, edited, reopened]

jobs:
  build:
    name: "Generate and Test Dictionaries (development build)"
    runs-on: ubuntu-latest

    env:
      VAL_REPORT_DIR: ${{ format({0}/{1}/, env.GITHUB_WORKSPACE, 'validation-reports') }}
      REG_TEST_DIR: ${{ format({0}/{1}/, env.GITHUB_WORKSPACE, 'test') }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Checkout submodules
        uses: textbook/git-checkout-submodule-action@master

      - name: Get Latest LDDTool and Validate Versions
        run: |
          echo ::set-env name=LDDTOOL_VERSION::$(curl --silent "https://api.github.com/repos/NASA-PDS/pds4-information-model/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' | sed 's/v//')
          echo ::set-env name=VALIDATE_VERSION::$(curl --silent "https://api.github.com/repos/NASA-PDS/validate/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' | sed 's/v//')

          # IM Version is only needed for release time, but keeping here for now
          echo ::set-env name=IM_VERSION::$(curl --silent "https://raw.githubusercontent.com/NASA-PDS/pds4-information-model/v$LDDTOOL_VERSION/model-ontology/src/ontology/Data/config.properties" | grep "infoModelVersionId" | awk -F= '{print $NF}')

      - name: Download and Unpack LDDTool
        run: |
          wget --directory-prefix=/tmp https://github.com/NASA-PDS/pds4-information-model/releases/download/v$LDDTOOL_VERSION/lddtool-$LDDTOOL_VERSION-bin.tar.gz
          tar -xf /tmp/lddtool-$LDDTOOL_VERSION-bin.tar.gz -C /tmp/

      - name: Generate Dictionaries
        run: |
          echo "+++ Cleanup development versions if they exist"
          mkdir -p build/development/; cd build/development/; rm -fr ./*

          echo "+++ Generate dictionaries"
          dependencies_dir=$GITHUB_WORKSPACE/src/dependencies
          if [ -d "$dependencies_dir" ]; then
            files="$dependencies_dir/*/src/*IngestLDD*.xml $GITHUB_WORKSPACE/src/*IngestLDD*.xml"
          else
            files="$GITHUB_WORKSPACE/src/*IngestLDD*.xml"
          fi

          /tmp/lddtool-$LDDTOOL_VERSION/bin/lddtool -plJn $files

      - name: Validate Schemas and Schematrons
        run: |
          wget --directory-prefix=/tmp https://github.com/NASA-PDS/validate/releases/download/v$VALIDATE_VERSION/validate-${VALIDATE_VERSION}-bin.tar.gz
          tar -xf /tmp/validate-${VALIDATE_VERSION}-bin.tar.gz -C /tmp/

          mkdir -p $VAL_REPORT_DIR
          /tmp/validate-$VALIDATE_VERSION/bin/validate --skip-content-validation -R pds4.label -x *.xsd -S *.sch -t *.xml | tee -a $VAL_REPORT_DIR/validate_schemas_report.txt
        id: validate_schemas
        continue-on-error: True

      # - name: Complete Regression Tests (if applicable)
      #   run: |
      #     wget --directory-prefix=/tmp https://github.com/NASA-PDS/validate/releases/download/v$VALIDATE_VERSION/validate-${VALIDATE_VERSION}-bin.tar.gz
      #     tar -xf /tmp/validate-${VALIDATE_VERSION}-bin.tar.gz

      #     if [ -d "$TEST_DIR" ]; then
      #       # Run test expected valid
      #       /tmp/validate-$VALIDATE_VERSION/bin/validate --skip-content-validation -R pds4.label -x *.xsd -S *.sch -t $REG_TEST_DIR/*VALID.xml | tee -a $VAL_REPORT_DIR/validate_regtest_report.txt

      #       # Run tests expected invalid
      #       # TBD some regression test FAIL
      #     fi
      #   id: regression_tests
      #   continue-on-error: True

      - name: Upload Validation Reports
        uses: actions/upload-artifact@v1
        with:
          name: validation-reports
          path: ${{ env.VAL_REPORT_DIR }}

      - name: Add Dictionaries to Pull Request
        run: |
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git config --local github.token ${{ secrets.GITHUB_TOKEN }}
            git add .
            git commit -m "Auto-generated dictionaries from Github Actions"
            git push
        if: ${{ success() }}
